#!/usr/bin/env python3
"""
Script Name: patch_merging.py
Description:
  This script merges cell annotation data (generated by the HEIP pipeline) for 
  a given base name, producing a single GeoJSON file with valid structure. 
  After fixing and removing unnecessary "properties" from features, only the 
  final GeoJSON is retained, named <BASE_NAME>.geojson.

Usage:
  python patch_merging.py <BASE_NAME>

Required Arguments:
  BASE_NAME  The base name for the slide or sample.

Output:
  - ./cells/<BASE_NAME>.geojson (the merged and cleaned GeoJSON).
"""

from src.merging import CellMerger # HEIP CellMerger
from pathlib import Path
import json
import sys
import os

# ---------------------------------------------------------------------
# Validate the single argument: BASE_NAME
# ---------------------------------------------------------------------
if len(sys.argv) != 2:
    print("Usage: python patch_merging.py <BASE_NAME>")
    sys.exit(1)

BASE_NAME = sys.argv[1]

# ---------------------------------------------------------------------
# Derive the RESULT_PATH automatically based on BASE_NAME
#   (where HEIP produces intermediate cell outputs).
# ---------------------------------------------------------------------
RESULT_PATH = f"./patches_seg/{BASE_NAME}_seg"

# ---------------------------------------------------------------------
# Merge the cell annotations into a single JSON file.
#   We read from sample1_patches/cells inside the result path.
# ---------------------------------------------------------------------
in_dir = f"{RESULT_PATH}/sample1_patches/cells"
result_dir = Path("./cells")          # Final directory for GeoJSON files
fname_cells = f"{BASE_NAME}.json"
fn = result_dir / fname_cells

c = CellMerger(in_dir=in_dir)
c.merge(fname=fn)

# ---------------------------------------------------------------------
# Step 1: Fix any potential GeoJSON structure issues if needed.
# ---------------------------------------------------------------------
geojson_name = f"{BASE_NAME}.json"        # Original merged JSON
geojson_file = result_dir / geojson_name
fixed_name = f"{BASE_NAME}_fixed.geojson" # Intermediate GeoJSON
fixed_file = result_dir / fixed_name

try:
    with open(geojson_file, 'r') as file:
        content = file.read()
    
    # Try parsing as JSON
    try:
        data = json.loads(content)
        
        # Check if it's already a valid FeatureCollection
        if isinstance(data, dict) and 'type' in data and 'features' in data:
            print("GeoJSON structure is valid, no changes made.")
            # Just save the same data to the intermediate fixed file
            with open(fixed_file, 'w') as output:
                json.dump(data, output)
        else:
            print("GeoJSON structure needs fixing.")
            # Wrap existing content in a FeatureCollection structure
            fixed_data = {
                "type": "FeatureCollection",
                "features": data if isinstance(data, list) else [data]
            }
            with open(fixed_file, 'w') as output:
                json.dump(fixed_data, output)
            print(f"Fixed GeoJSON saved to {fixed_file}.")
    
    except json.JSONDecodeError:
        # If file is not valid JSON line-by-line, wrap lines in a FeatureCollection
        print("File is not valid JSON. Wrapping as a FeatureCollection.")
        fixed_data = {
            "type": "FeatureCollection",
            "features": [json.loads(line) for line in content.splitlines() if line.strip()]
        }
        with open(fixed_file, 'w') as output:
            json.dump(fixed_data, output)
        print(f"Fixed GeoJSON saved to {fixed_file}.")

except Exception as e:
    print(f"An error occurred while fixing GeoJSON: {e}")
    sys.exit(1)

# ---------------------------------------------------------------------
# Step 2: Remove 'properties' from each feature in the fixed GeoJSON,
#         then save the final result as <BASE_NAME>.geojson
# ---------------------------------------------------------------------
final_name = f"{BASE_NAME}.geojson"
final_file = result_dir / final_name

try:
    with open(fixed_file, 'r') as file:
        geojson_data = json.load(file)

    # Strip out the 'properties' field from each feature
    for feature in geojson_data.get("features", []):
        if "properties" in feature:
            del feature["properties"]

    # Save the updated GeoJSON as <BASE_NAME>.geojson
    with open(final_file, 'w') as file:
        json.dump(geojson_data, file, indent=2)

    print(f"Final GeoJSON saved to {final_file}.")
except Exception as e:
    print(f"An error occurred while removing properties: {e}")
    sys.exit(1)

# ---------------------------------------------------------------------
# Step 3: Remove the original and intermediate files, leaving only 
#         <BASE_NAME>.geojson.
# ---------------------------------------------------------------------
try:
    os.remove(geojson_file)   # Remove BASE_NAME.json
    os.remove(fixed_file)     # Remove BASE_NAME_fixed.geojson
    print("Removed original and intermediate GeoJSON files.")
except OSError as e:
    print(f"Could not remove file(s): {e}")

print("Processing complete!")
